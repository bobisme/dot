snippet print "print -> fmt.PrintLn" !b
fmt.Println($1)
endsnippet

snippet go "make a goroutine literal" !b
go func($2) {
	$1
}($3)
endsnippet

snippet test "Make a test" !b
func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet range "do a typical range" !b
for ${1:i}${2:, ${3:val}} := range ${4:iterator} {
	$0
}
endsnippet

snippet fori "i++ for loop" !b
for i := 0; i < ${1:maxint}; i++ {
	$0
}
endsnippet

snippet convey "Convey" b
Convey("${1:Given you have a thing...}"${2:, t}, func() {
	$0
})
endsnippet

snippet __ "Convey short" b
__("${1:Given you have a thing...}"${2:, t}, func() {
	$0
})
endsnippet

snippet eq "Convey should equal" b
So($1, ShouldEqual, $2)
endsnippet

snippet sortable "Implement sortable interface" b
func (${1:obj} ${2:Struct}) Len int {
	return len($1)
}

func ($1 $2) Swap(i, j int) {
	$1[i], $1[j] = $1[j], $1[i]
}

func ($1 $2) Less(i, j int) bool {
	return $1[i]${3:.Property} < $1[j]$3
}
endsnippet

snippet des "Ginkgo Describe" b
Describe("${1:Some Thing}", func() {
	$0
})
endsnippet

snippet con "Ginkgo Context" b
Context("${1:Some Situation}", func() {
	$0
})
endsnippet

snippet it "Ginkgo It" b
It("${1:should be ok}", func() {
	$0
})
endsnippet

snippet om "Gomega expect Ω" b
Ω($1).Should(${2:Equal($0)})
endsnippet

snippet field "Struct field with annotations" !b
${1:Name} ${2:string} \`json:"${3:${1/\w/\l$0/}}"$4\`
endsnippet

snippet fj "Struct field with JSON annotations" !b
${1:Name} ${2:string} \`json:"${3:${1/\w/\l$0/}}"$4\`
endsnippet

snippet fjre "Struct field with JSON+rethink annotations" !b
${1:Name} ${2:string} \`json:"${3:${1/\w/\l$0/}}" gorethink:"${3:${1/\w/\l$0/}}"$4\`
endsnippet
