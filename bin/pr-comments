#!/usr/bin/env nu

# Show condensed diff with context around the specified line
def show-condensed-diff [diff_hunk: string, original_line: int] {
    if ($diff_hunk | is-empty) or ($diff_hunk == null) {
        return
    }
    
    let lines = $diff_hunk | lines
    
    # Parse the @@ header to get line numbers
    let header = $lines | first
    let header_match = $header | parse '@@ -{old_start},{old_count} +{new_start},{new_count} @@' | first
    
    let new_start = if ($header_match | is-empty) { 1 } else { $header_match.new_start | into int }
    
    # Find the line index in the diff that corresponds to original_line
    mut current_new_line = $new_start - 1
    mut comment_line_idx = 0
    
    for idx in 1..<($lines | length) {
        let line = $lines | get $idx
        
        # Track line numbers in the new file (skip lines that start with -)
        if not ($line | str starts-with '-') {
            $current_new_line = $current_new_line + 1
        }
        
        # Check if we've reached the comment line
        if $current_new_line == $original_line {
            $comment_line_idx = $idx
            break
        }
    }
    
    # Build the output
    mut output = []
    $output = ($output | append $header)
    
    # Show context around the comment line
    if $comment_line_idx > 0 {
        let context_size = 3
        let start_idx = if ($comment_line_idx - $context_size) < 1 { 1 } else { $comment_line_idx - $context_size }
        let end_idx = if ($comment_line_idx + $context_size) > (($lines | length) - 1) { ($lines | length) - 1 } else { $comment_line_idx + $context_size }
        
        if $start_idx > 1 {
            $output = ($output | append "...")
        }
        
        for idx in $start_idx..$end_idx {
            $output = ($output | append ($lines | get $idx))
        }
        
        if $end_idx < (($lines | length) - 1) {
            $output = ($output | append "...")
        }
    } else {
        # Fallback: show first few and last few lines
        let line_count = $lines | length
        if $line_count <= 10 {
            $output = ($output | append $lines)
        } else {
            # Show first 4 lines
            for idx in 0..3 {
                $output = ($output | append ($lines | get $idx))
            }
            $output = ($output | append "...")
            # Show last 4 lines
            for idx in ($line_count - 4)..($line_count - 1) {
                $output = ($output | append ($lines | get $idx))
            }
        }
    }
    
    $output | str join "\n"
}

# Main function to display PR comments
def main [
    pr_number: int   # PR number to fetch comments for
    --full-diff      # Show full diff instead of condensed
] {
    let term_width = (term size).columns
    let separator = $"(ansi grey)(1..$term_width | each { '─' } | str join)(ansi reset)"
    
    # Fetch PR comments from GitHub API
    let comments = (gh api $"repos/:owner/:repo/pulls/($pr_number)/comments" | from json)
    
    # Process each comment
    for comment in $comments {
        # Print separator
        print $separator
        
        # Print file path
        print $comment.path
        print ""
        
        # Handle diff hunk
        if ($comment.diff_hunk? | is-empty) or ($comment.diff_hunk? == null) {
            print "No diff hunk"
        } else {
            if $full_diff {
                # Show full diff with syntax highlighting
                $comment.diff_hunk | bat --language=diff --style=plain --color=always --paging=never
            } else {
                # Show condensed diff with syntax highlighting
                let original_line = if ($comment.original_line? | is-empty) { 0 } else { $comment.original_line }
                let condensed = show-condensed-diff $comment.diff_hunk $original_line
                $condensed | bat --language=diff --style=plain --color=always --paging=never
            }
        }
        
        print ""
        
        # Print comment header with author and timestamp
        print $"┏ (ansi blue)@($comment.user.login) ━ ($comment.updated_at)(ansi reset)"
        
        # Print comment body
        let formatted_body = ($comment.body | fmt -w 80 | lines | each { |line| $"┃ ($line)" } | str join "\n")
        print $formatted_body
        
        print "┗ "
        print ""
    }
}