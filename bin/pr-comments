#!/usr/bin/env nu

# Show condensed diff with context around the specified line
def show-condensed-diff [diff_hunk: string, original_line: int] {
    if ($diff_hunk | is-empty) or ($diff_hunk == null) {
        return
    }
    
    let lines = $diff_hunk | lines
    
    # Parse the @@ header to get line numbers
    let header = $lines | first
    let header_matches = $header | parse '@@ -{old_start},{old_count} +{new_start},{new_count} @@'
    let header_match = if ($header_matches | is-empty) { null } else { $header_matches | first }
    
    let new_start = if ($header_match == null) { 1 } else { $header_match.new_start | into int }
    
    # Find the line index in the diff that corresponds to original_line
    mut current_new_line = $new_start - 1
    mut comment_line_idx = 0
    
    for idx in 1..<($lines | length) {
        let line = $lines | get $idx
        
        # Track line numbers in the new file (skip lines that start with -)
        if not ($line | str starts-with '-') {
            $current_new_line = $current_new_line + 1
        }
        
        # Check if we've reached the comment line
        if $current_new_line == $original_line {
            $comment_line_idx = $idx
            break
        }
    }
    
    # Build the output
    mut output = []
    $output = ($output | append $header)
    
    # Show context around the comment line
    if $comment_line_idx > 0 {
        let context_size = 3
        let start_idx = if ($comment_line_idx - $context_size) < 1 { 1 } else { $comment_line_idx - $context_size }
        let end_idx = if ($comment_line_idx + $context_size) > (($lines | length) - 1) { ($lines | length) - 1 } else { $comment_line_idx + $context_size }
        
        if $start_idx > 1 {
            $output = ($output | append "...")
        }
        
        for idx in $start_idx..$end_idx {
            $output = ($output | append ($lines | get $idx))
        }
        
        if $end_idx < (($lines | length) - 1) {
            $output = ($output | append "...")
        }
    } else {
        # Fallback: show first few and last few lines
        let line_count = $lines | length
        if $line_count <= 10 {
            $output = ($output | append $lines)
        } else {
            # Show first 4 lines
            for idx in 0..3 {
                $output = ($output | append ($lines | get $idx))
            }
            $output = ($output | append "...")
            # Show last 4 lines
            for idx in ($line_count - 4)..($line_count - 1) {
                $output = ($output | append ($lines | get $idx))
            }
        }
    }
    
    $output | str join "\n"
}

# Tool to show GitHub PR comments in the terminal attached to their respective diffs.
def main [
    pr_number: int   # PR number to fetch comments for
    --full-diff      # Show full diff instead of condensed
] {
    let term_width = (term size).columns
    let separator = $"(ansi dark_gray)(1..$term_width | each { '━' } | str join)(ansi reset)"
    
    # Fetch PR comments from GitHub API
    let comments = (gh api $"repos/:owner/:repo/pulls/($pr_number)/comments" | from json)
    
    # Process each comment
    for comment in $comments {
        # Print separator
        print $separator
        
        # Print file path with styling
        print $"(ansi cyan_bold)($comment.path)(ansi reset)"
        print ""
        
        # Handle diff hunk
        if ($comment.diff_hunk? | is-empty) or ($comment.diff_hunk? == null) {
            print "No diff hunk"
        } else {
            if $full_diff {
                # Show full diff with syntax highlighting
                $comment.diff_hunk | bat --language=diff --style=plain --color=always --paging=never
            } else {
                # Show condensed diff with syntax highlighting
                let original_line = if ($comment.original_line? | is-empty) { 0 } else { $comment.original_line }
                let condensed = show-condensed-diff $comment.diff_hunk $original_line
                $condensed | bat --language=diff --style=plain --color=always --paging=never
            }
        }
        
        print ""
        
        # Calculate the maximum width needed for the comment
        let default_width = 79
        let inner_width = $default_width - 4  # Account for borders "│ " and " │"
        
        # Pre-process comment to find max line width
        let lines = $comment.body | lines
        mut max_width = $default_width
        mut in_code_block = false
        
        for line in $lines {
            if ($line | str starts-with '```') {
                $in_code_block = not $in_code_block
            } else if $in_code_block {
                # For code lines, we need to account for their actual width
                let line_length = ($line | str length) + 4  # +4 for borders
                if $line_length > $max_width {
                    $max_width = $line_length
                }
            }
        }
        
        # Use the larger of default or calculated width
        let box_width = if $max_width > $default_width { $max_width } else { $default_width }
        let content_width = $box_width - 4
        
        # Create the box borders
        let top_border = $"(ansi dark_gray)┌(1..($box_width - 2) | each { '─' } | str join)┐(ansi reset)"
        let mid_border = $"(ansi dark_gray)├(1..($box_width - 2) | each { '─' } | str join)┤(ansi reset)"
        let bot_border = $"(ansi dark_gray)└(1..($box_width - 2) | each { '─' } | str join)┘(ansi reset)"
        
        # Print comment box
        print $top_border
        
        # Print comment header with author and timestamp
        let timestamp = $comment.updated_at | into datetime | date humanize
        let header_text = $"(ansi yellow_bold)@($comment.user.login)(ansi reset) (ansi dark_gray)• ($timestamp)(ansi reset)"
        let header_line = $"(ansi dark_gray)│(ansi reset) ($header_text)"
        # Calculate visible length without ANSI codes for proper padding
        let visible_length = ($"@($comment.user.login) • ($timestamp)" | str length)
        let padding_needed = $content_width - $visible_length
        let padding = (1..$padding_needed | each { ' ' } | str join)
        print $"($header_line)($padding)   (ansi dark_gray)│(ansi reset)"
        print $mid_border
        
        # Process comment body - handle code blocks specially
        let lines = $comment.body | lines
        mut in_code_block = false
        mut code_lines = []
        mut output_lines = []
        
        for line in $lines {
            if ($line | str starts-with '```') {
                if $in_code_block {
                    # End of code block - highlight and add to output
                    let code_content = $code_lines | str join "\n"
                    let highlighted = ($code_content | bat --language=typescript --style=plain --color=always --paging=never | lines)
                    for code_line in $highlighted {
                        let stripped_line = ($code_line | ansi strip)
                        let padding_needed = $content_width - ($stripped_line | str length)
                        let padding = if $padding_needed > 0 { (1..$padding_needed | each { ' ' } | str join) } else { '' }
                        $output_lines = ($output_lines | append $"(ansi dark_gray)│(ansi reset) ($code_line)($padding) (ansi dark_gray)│(ansi reset)")
                    }
                    $code_lines = []
                    $in_code_block = false
                    # Add the closing ``` line
                    let padded_fence = $line | fill -a l -w $content_width -c ' '
                    $output_lines = ($output_lines | append $"(ansi dark_gray)│(ansi reset) ($padded_fence) (ansi dark_gray)│(ansi reset)")
                } else {
                    # Start of code block
                    $in_code_block = true
                    let padded_fence = $line | fill -a l -w $content_width -c ' '
                    $output_lines = ($output_lines | append $"(ansi dark_gray)│(ansi reset) ($padded_fence) (ansi dark_gray)│(ansi reset)")
                }
            } else if $in_code_block {
                # Collect code lines
                $code_lines = ($code_lines | append $line)
            } else {
                # Regular text - wrap and format
                let wrapped_lines = ($line | fmt -w $content_width | lines)
                for wrapped_line in $wrapped_lines {
                    let padded_line = $wrapped_line | fill -a l -w $content_width -c ' '
                    $output_lines = ($output_lines | append $"(ansi dark_gray)│(ansi reset) ($padded_line) (ansi dark_gray)│(ansi reset)")
                }
            }
        }
        
        print ($output_lines | str join "\n")
        
        print $bot_border
        print ""
    }
}
